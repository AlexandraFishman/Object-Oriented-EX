package Global;

import Comparator.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Date;

/** this class represents a row from Union output file.
 * Contains private String variables: 5 key labels and one more " extends " key that
 * contains the 40 more dynamic variables. Getters and one constructor that gets 2 Strings: 
 * the first is the keys of data (they separated by ',') and the second String is the "extension" 
 * (also separated by ','). Also – the constructor make sure that the extension does not get over 40 
 * (if we lack of data – it will be spaces).
 * The class contains five comparators (ID, time, alt, lon, lat) for each comparator object 
 * has been done @Override to the Compare function.
 * The class also contains CompareByTime function and CompareByPlace function that we will use on the filter.
 * @authors Alona + Alex
 */
public class CSV_Merged_Row {
	
	private String Time  = "";
	private String ID  = "";
	private String Lat  = "";
	private String Lon  = "";
	private String Alt  = "";
	private String Extension ="";
	
	/**
	 * Constructor from values sent
	 * @param prefix
	 * @param suffix
	 */
	public CSV_Merged_Row(String prefix, String suffix){
		String[] prefix_arr = prefix.split(",");
		try{
		this.Time = DateFormat.adjustTime(prefix_arr[0]);
		this.ID = prefix_arr[1];
		this.Lat = prefix_arr[2];
		this.Lon = prefix_arr[3];
		this.Alt = prefix_arr[4];
		}
		catch(ArrayIndexOutOfBoundsException ex)
		{
			return;
		}
		
		String[] suffix_arr = suffix.split(",");
		if(suffix_arr.length > 41)
		{
			this.Extension = arrayToString(Arrays.copyOfRange(suffix_arr, 0, 41));
		}
		else
		{
			String blanks="";
			for(int i=0;i< 40 - suffix_arr.length;i++)
			{
				blanks = blanks +",";
			}
			this.Extension = arrayToString(suffix_arr) + blanks;
		}
		
	}
	
	/**
	 * Comparator generated by MyComparatorFactory
	 */
	@SuppressWarnings("unchecked")
    public static Comparator<CSV_Merged_Row> LONComparator = MyComparatorFactory.getComparator(CSV_Merged_Row.class, "ByLON");

    /**
	 * Comparator generated by MyComparatorFactory
	 */
    @SuppressWarnings("unchecked")
    public static Comparator<CSV_Merged_Row> LATComparator = MyComparatorFactory.getComparator(CSV_Merged_Row.class, "ByLAT");

    /**
	 * Comparator generated by MyComparatorFactory
	 */
    @SuppressWarnings("unchecked")
    public static Comparator<CSV_Merged_Row> ALTComparator = MyComparatorFactory.getComparator(CSV_Merged_Row.class, "ByALT");
    
    /**
	 * Comparator generated by MyComparatorFactory
	 */
    @SuppressWarnings("unchecked")
    public static Comparator<CSV_Merged_Row> TIMEComparator = MyComparatorFactory.getComparator(CSV_Merged_Row.class, "ByTIME");
	
    /**
	 * Comparator generated by MyComparatorFactory
	 */
    @SuppressWarnings("unchecked")
    public static Comparator<CSV_Merged_Row> IDComparator = MyComparatorFactory.getComparator(CSV_Merged_Row.class, "ByID");
   
    
    
    /**
     * Function gets an array and returns the value as string 
     * @param array
     * @return the array as string but from the first place
     */
    public static String arrayToString(String array[])
    {
        if (array.length == 0) return "";
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < array.length; ++i)
        {
            sb.append(array[i]+",");
        }
        return sb.substring(1);
    }
    
	public String getTime() {return Time;}
	public String getID() {return ID;}
	public String getLat() {return Lat;}
	public String getLon() {return Lon;}
	public String getAlt() {return Alt;}
	public String getExtension() {return Extension;}
	

	public String getMAC1() { String [] mac = this.Extension.split(","); return mac[1];}
	public String getMAC2() {String [] mac = this.Extension.split(","); if(mac.length>5){if(!mac[5].isEmpty()) return mac[5];}return "";}
	public String getMAC3() {String [] mac = this.Extension.split(","); if(mac.length>9){if(!mac[9].isEmpty()) return mac[9];}return "";}
	public String getMAC4() {String [] mac = this.Extension.split(","); if(mac.length>13){if(!mac[13].isEmpty()) return mac[13];}return "";}
	public String getMAC5() {String [] mac = this.Extension.split(","); if(mac.length>17){if(!mac[17].isEmpty()) return mac[17];}return "";}
	public String getMAC6() {String [] mac = this.Extension.split(","); if(mac.length>21){if(!mac[21].isEmpty()) return mac[21];}return "";}
	public String getMAC7() {String [] mac = this.Extension.split(","); if(mac.length>25){if(!mac[25].isEmpty()) return mac[25];}return "";}
	public String getMAC8() {String [] mac = this.Extension.split(","); if(mac.length>29){if(!mac[29].isEmpty()) return mac[29];}return "";}
	public String getMAC9() {String [] mac = this.Extension.split(","); if(mac.length>33){if(!mac[33].isEmpty()) return mac[33];}return "";}
	public String getMAC10(){String [] mac = this.Extension.split(","); if(mac.length>37){if(!mac[37].isEmpty()) return mac[37];}return "";}

	
	public String getSignal1() { String [] signal = this.Extension.split(","); if(!signal[3].isEmpty()) return signal[3]; return "";}
	public String getSignal2() {String [] signal = this.Extension.split(","); if(signal.length>5){if(!signal[7].isEmpty()) return signal[7];}return "";}
	public String getSignal3() {String [] signal = this.Extension.split(","); if(signal.length>9){if(!signal[11].isEmpty()) return signal[11];}return "";}
	public String getSignal4() {String [] signal = this.Extension.split(","); if(signal.length>13){if(!signal[15].isEmpty()) return signal[15];}return "";}
	public String getSignal5() {String [] signal = this.Extension.split(","); if(signal.length>17){if(!signal[19].isEmpty()) return signal[19];}return "";}
	public String getSignal6() {String [] signal = this.Extension.split(","); if(signal.length>21){if(!signal[23].isEmpty()) return signal[23];}return "";}
	public String getSignal7() {String [] signal = this.Extension.split(","); if(signal.length>25){if(!signal[27].isEmpty()) return signal[27];}return "";}
	public String getSignal8() {String [] signal = this.Extension.split(","); if(signal.length>29){if(!signal[31].isEmpty()) return signal[31];}return "";}
	public String getSignal9() {String [] signal = this.Extension.split(","); if(signal.length>33){if(!signal[35].isEmpty()) return signal[35];}return "";}
	public String getSignal10(){String [] signal = this.Extension.split(","); if(signal.length>39){if(!signal[39].isEmpty()) return signal[39];}return "";}
	
	
/**
 **OLD CURRENTRLY NOT USED FILTER*
 * @param operator
 * @param time
 * @return
 */
	public boolean compareByTime(String operator,String time)
	{
		if(time == "") return false;
		SimpleDateFormat formator;
		time = DateFormat.adjustTime(time);
		if(DateFormat.getDateFormat(time)=="DD/MM/YYYY"){
			 formator= new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		}
		else{
			formator= new SimpleDateFormat("yyyy-mm-dd HH:mm:ss");
		}
    	try
    	{
	    	Date d1 = formator.parse(DateFormat.adjustTime(this.Time));
	    	Date d2 = formator.parse(time);
	    	switch(operator)
	    	{
		    	case ">":
		    		return d1.compareTo(d2) > 0;
		    	case "<":
		    		return d1.compareTo(d2) < 0;
		    	default:
		    		return d1.compareTo(d2) == 0;
	    	}
    	}
    	
    	catch(ParseException ex)
    	{	System.out.println(ex.getMessage());return false; }
	};
	
	/**
	 * OLD CURRENTRLY NOT USED
	 * Compares by place 
	 * @param lat
	 * @param lon
	 * @param alt
	 * @return the point - if it's in the Radius 
	 */
	public boolean compareByPlace(double lat, double lon, double alt)
	{
		double rad = Math.sqrt(Math.pow(Double.parseDouble(this.Lat) - lat, 2)+
				     Math.pow(Double.parseDouble(this.Lon) - lon, 2)+
				     Math.pow(Double.parseDouble(this.Alt) - alt, 2));
		return (rad < 0.005);
	}

	public boolean compareByMAC(String mac) {
		if((this.getMAC1() == "") &&
		(this.getMAC2() == "") &&
		(this.getMAC3() == "") &&
		(this.getMAC4() == "") &&
		(this.getMAC5() == "") &&
		(this.getMAC6() == "") &&
		(this.getMAC7() == "") &&
		(this.getMAC8() == "") &&
		(this.getMAC9() == "") &&
		(this.getMAC10() == ""))
			return false;
				
		if(this.getMAC1().trim().compareTo(mac.trim()) == 0)
			return true;
		if(this.getMAC2().trim().compareTo(mac.trim()) == 0)
			return true;
		if(this.getMAC3().trim().compareTo(mac.trim()) == 0)
			return true;
		if(this.getMAC4().trim().compareTo(mac.trim()) == 0)
			return true;
		if(this.getMAC5().trim().compareTo(mac.trim()) == 0)
			return true;
		if(this.getMAC6().trim().compareTo(mac.trim()) == 0)
			return true;
		if(this.getMAC7().trim().compareTo(mac.trim()) == 0)
			return true;
		if(this.getMAC8().trim().compareTo(mac.trim()) == 0)
			return true;
		if(this.getMAC9().trim().compareTo(mac.trim()) == 0)
			return true;
		if(this.getMAC10().trim().compareTo(mac.trim()) == 0)
			return true;
		
		return false;
	}
	
	@Override
	public String toString() {
		return "CSV_Merged_Row [Time=" + Time + ", ID=" + ID + ", Lat=" + Lat + ", Lon=" + Lon + ", Alt=" + Alt
				+ ", Extension=" + Extension + "]";
	}

	/**
	 * Fetches the signal of the  mac 
	 * @param mac
	 * @return it's signal
	 */
	public String getMacSignal(String mac) {
		if(this.getMAC1().compareTo(mac) == 0)
			return this.getSignal1();
		if(this.getMAC2().compareTo(mac) == 0)
			return this.getSignal2();
		if(this.getMAC3().compareTo(mac) == 0)
			return this.getSignal3();
		if(this.getMAC4().compareTo(mac) == 0)
			return this.getSignal4();
		if(this.getMAC5().compareTo(mac) == 0)
			return this.getSignal5();
		if(this.getMAC6().compareTo(mac) == 0)
			return this.getSignal6();
		if(this.getMAC7().compareTo(mac) == 0)
			return this.getSignal7();
		if(this.getMAC8().compareTo(mac) == 0)
			return this.getSignal8();
		if(this.getMAC9().compareTo(mac) == 0)
			return this.getSignal9();
		if(this.getMAC10().compareTo(mac) == 0)
			return this.getSignal10();
		
		return "";
	}  
    
}

